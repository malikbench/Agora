<!DOCTYPE html>
<html lang="fr">
    <head>
        <meta charset="UTF-8">
        <title>Augustus - {{ gameName }}</title>
        <link rel="stylesheet" type="text/css" href="{{ asset('bundles/agoragameaugustus/css/game.css') }}">
        <link rel="stylesheet" type="text/css" href="{{ asset('bundles/agoragameaugustus/css/tchat.css') }}">
        <script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=" crossorigin="anonymous"></script>
        <script> //let playerUsername = "";</script>
    </head>

    <body>
        <div class="overlay" onclick="removeOverlay(this)">
            <div class="overlayContent" onclick="event.stopPropagation()">
            </div>
        </div>

        <div id="gameContent" class="flexContainer">
            <div id="playersInfo" class="flexContainer flexColumn">
                <div id="allPlayersInfo" class="flexContainer flexColumn" onload="selectPlayer(0)">
                    {% for player in game.players %}
                        <div class="playerInfo" onclick="selectPlayer( {{ loop.index0 }} )">
                            <p class="p">
                                {{ player.name ? player.name : "null" }}<br>
                                Légions : {{ player.legion }}/{{ player.legionMax }}<br>
                                Objectifs sous contrôle : {{ player.ctrlObj|length }}
                            </p>
                        </div>
                    {% endfor %}
                </div>

                <div class="flex1"></div>

                <div id="myInfo">
                    <p class="p">
                        {{ me.name }}<br>
                        Légions :<br>
                        {{ me.legion }}/{{ me.legionMax }}<br>
                        Score :<br>
                        {{ me.score }}
                        <br>
                        Resssources :<br>
                        Blé : {{ me.wheat }}<br>
                        Or : {{ me.gold }}<br>
                    </p>
                </div>
            </div>

            <div class="flex1"></div>

            <div id="boardAndHand" class="flexContainer flexColumn">
                <div id="instructions">
                    <p class="p">{{ "TODO instructions" }}</p>
                </div>


                <div id="playerBar" class="flexContainer flexRow">

                    {% for player in game.players %}
                    <div class="selectedPlayerInfo" style="visibility: hidden">
                        <div>
                            <p class="p">

                                {{ player.name }}<br>
                                Légions :<br>
                                {{ player.legion }}/{{ player.legionMax }}
                            </p>
                        </div>

                        <div class="flex1"></div>

                        {% for card in player.currObj %}
                        <div class="card" style="background-image: url('{{ asset('bundles/agoragameaugustus/img/Cards/' ~ card.number ~ '.jpg') }}');">
                            {% for token in card.tokens.length %}
                            {% if controlledToken[loop.index] %} <!-- TODO  remplacer par la bonne péthode pour savoir si un token est controllé -->
                            <img src='../../img/Token/legion.png' alt="" class="legion" style="top: {{ 31 * loop.index }}px;">
                            {% endif %}
                            {% endfor %}
                        </div>
                        <!--
                        <img src="{{ asset('bundles/agoragameaugustus/img/Cards/' ~ card.number ~ '.jpg') }}" alt="Card{{ card.number }}" height="200" ondblclick="getOverlay(cardInfo( {{ card.number }} ))">
                        -->
                        {% endfor %}

                        <div class="flex1"></div>

                        <div class="flexContainer flexColumn">
                            <button>Captures</button>
                            <button>Récompenses</button>
                        </div>
                    </div>
                    {% endfor %}

                </div>

                <!-- <div class="flex1"></div> -->

                <div id="boardBar" class="flexContainer flexRow">
                    <div class="flex1"></div>

                    <div id="lootBars" class="flexContainer flexColumn">
                        <div id="topLoot" class="flexContainer flexRow">
                            <!-- TODO make infos for each loot -->
                            <img src="{{ asset('bundles/agoragameaugustus/img/Loot/Loot2Cards.jpg') }}" alt="Loot2Cards" height="100" class="{{ not loot.isAvailable ? taken }}" onclick="selectBoard(this)" ondblclick="getOverlay(lootInfo( '2' ))">
                            <img src="{{ asset('bundles/agoragameaugustus/img/Loot/Loot3Cards.jpg') }}" alt="Loot3Cards" height="100" class="{{ not loot.isAvailable ? taken }}" onclick="selectBoard(this)" ondblclick="getOverlay(lootInfo( '3' ))">
                            <img src="{{ asset('bundles/agoragameaugustus/img/Loot/Loot4Cards.jpg') }}" alt="Loot4Cards" height="100" class="{{ not loot.isAvailable ? taken }}" onclick="selectBoard(this)" ondblclick="getOverlay(lootInfo( '4' ))">
                            <img src="{{ asset('bundles/agoragameaugustus/img/Loot/Loot5Cards.jpg') }}" alt="Loot5Cards" height="100" class="{{ not loot.isAvailable ? taken }}" onclick="selectBoard(this)" ondblclick="getOverlay(lootInfo( '5' ))">
                            <img src="{{ asset('bundles/agoragameaugustus/img/Loot/Loot6Cards.jpg') }}" alt="Loot6Cards" height="100" class="{{ not loot.isAvailable ? taken }}" onclick="selectBoard(this)" ondblclick="getOverlay(lootInfo( '6' ))">
                            <img src="{{ asset('bundles/agoragameaugustus/img/Loot/LootGold.jpg') }}" alt="LootGold" height="100" class="{{ not loot.isAvailable ? taken }}" onclick="selectBoard(this)" ondblclick="getOverlay(lootInfo( 'gold' ))">
                        </div>

                        <div class="flex1"></div>

                        <div id="botLoot" class="flexContainer flexRow">
                            <!-- TODO make infos for each loot -->
                            <img src="{{ asset('bundles/agoragameaugustus/img/Loot/LootSenator.jpg') }}" alt="LootSenator" height="100" class="{{ not loot.isAvailable ? taken }}" onclick="selectBoard(this)" ondblclick="getOverlay(lootInfo( 'senator' ))">
                            <img src="{{ asset('bundles/agoragameaugustus/img/Loot/LootGreen.jpg') }}" alt="LootGreen" height="100" class="{{ not loot.isAvailable ? taken }}" onclick="selectBoard(this)" ondblclick="getOverlay(lootInfo( 'green' ))">
                            <img src="{{ asset('bundles/agoragameaugustus/img/Loot/LootMulti.jpg') }}" alt="LootMulti" height="100" class="{{ not loot.isAvailable ? taken }}" onclick="selectBoard(this)" ondblclick="getOverlay(lootInfo( 'multi' ))">
                            <img src="{{ asset('bundles/agoragameaugustus/img/Loot/LootRose.jpg') }}" alt="LootRose" height="100" class="{{ not loot.isAvailable ? taken }}" onclick="selectBoard(this)" ondblclick="getOverlay(lootInfo( 'rose' ))">
                            <img src="{{ asset('bundles/agoragameaugustus/img/Loot/LootOrange.jpg') }}" alt="LootOrange" height="100" class="{{ not loot.isAvailable ? taken }}" onclick="selectBoard(this)" ondblclick="getOverlay(lootInfo( 'orange' ))">
                            <img src="{{ asset('bundles/agoragameaugustus/img/Loot/LootWheat.jpg') }}" alt="LootWheat" height="100" class="{{ not loot.isAvailable ? taken }}" onclick="selectBoard(this)" ondblclick="getOverlay(lootInfo( 'wheat' ))">
                        </div>
                    </div>

                    <div class="flex1"></div>

                    <div id="objLine" class="flexContainer flexRow">
                        <div class="flexContainer flexColumn">
                            <div>
                                <img src="{{ asset('bundles/agoragameaugustus/img/Cards/' ~ game.board.objLine[0].number ~ '.jpg') }}" alt="Card{{ board.objLine[0].number }}" height="100" onclick="selectBoard(this)" ondblclick="getOverlay(cardInfo( {{ game.board.objLine[0].number }} ))">
                                <img src="{{ asset('bundles/agoragameaugustus/img/Cards/' ~ game.board.objLine[1].number ~ '.jpg') }}" alt="Card{{ board.objLine[1].number }}" height="100" onclick="selectBoard(this)" ondblclick="getOverlay(cardInfo( {{ game.board.objLine[1].number }} ))">
                            </div>
                            <div>
                                <img src="{{ asset('bundles/agoragameaugustus/img/Cards/' ~ game.board.objLine[2].number ~ '.jpg') }}" alt="Card{{ board.objLine[2].number }}" height="100" onclick="selectBoard(this)" ondblclick="getOverlay(cardInfo( {{ game.board.objLine[2].number }} ))">
                                <img src="{{ asset('bundles/agoragameaugustus/img/Cards/' ~ game.board.objLine[3].number ~ '.jpg') }}" alt="Card{{ board.objLine[3].number }}" height="100" onclick="selectBoard(this)" ondblclick="getOverlay(cardInfo( {{ game.board.objLine[3].number }} ))">
                            </div>
                        </div>
                        <div class="flexContainer flexColumn">
                            <div class="flex1"></div>
                            <img src="{{ asset('bundles/agoragameaugustus/img/Cards/' ~ game.board.objLine[4].number ~ '.jpg') }}" alt="Card{{ board.objLine[4].number }}" height="100" onclick="selectBoard(this)" ondblclick="getOverlay(cardInfo( {{ game.board.objLine[4].number }} ))">
                            <div class="flex1"></div>
                        </div>
                    </div>
                </div>

                <!-- <div class="flex1"></div> -->

                <div id="myBar" class="flexContainer flexRow">
                    {% for card in me.currObj %}
                        {% set cardIndex = loop.index0 %}
                    <div class="card" style="background-image: url('{{ asset('bundles/agoragameaugustus/img/Cards/' ~ card.number ~ '.jpg') }}');" onclick="selectHand(this)" ondblclick="getOverlay(this)">
                        {% for token in card.tokens.length %}
                        {% if controlledToken[loop.index0] %} <!-- TODO  remplacer par la bonne méthode pour savoir si un token est controllé -->
                        <img src='../../img/Token/legion.png' alt="" class="legion" style="top: {{ 31 * loop.index }}px;">
                        {% endif %}
                        {% endfor %}
                        <div class="cardAction{{ loop.index0 }} cardAction" style="visibility: hidden;">
                            {% if game.getState() == "RemoveAllLegion" and me.legionMax != me.legion %}
                                <div>
                                    <p>Vous pouvez retirer toutes les légions de cette carte.</p>
                                    <button onclick="removeAllLegionOnCard({{ cardIndex }})">Retirer</button>
                                </div>
                            {% else %}
                            <div>
                                <p>Vous pouvez retirer une légion d'un de ces emplacements en le sélectionnant:</p>
                                {% for token in card.tokens %}
                                    {% if controlledToken[loop.index0] %}
                                    <img class="token" src="../../img/Token/Token{{ token.name }}.jpg" alt="" height="32" onclick="selectToken(this, loop.index0, {{ cardIndex }})">
                                    {% endif %}
                                {% endfor %}
                                <button onclick="removeSelectedLegion()">Retirer</button>

                                <br>
                                <br>
                            </div>
                            <div>
                                <p>Vous pouvez placer une légion sur cette carte :</p>
                                <button onclick="addBestToken(this, {{ card.tokens }}, {{ card.ctrlTokens }}, {{ cardIndex }})">Placer</button>
                            </div>
                            {% endif %}
                        </div>
                    </div>
                    <!--
                        <img src="{{ asset('bundles/agoragameaugustus/img/Cards/' ~ card.number ~ '.jpg') }}" alt="Card{{ card.number }}" height="200" onclick="selectHand(this)" ondblclick="getOverlay(cardInfo( {{ card.number }} ))">
                    -->
                    {% endfor %}

                    <div class="flex1"></div>

                    <div class="flexContainer flexColumn">
                        <button>Captures</button>
                        <button>Récompenses</button>
                    </div>
                </div>

                <div id="buttons" class="flexContainer flexRow">
                    <div class="flex1"></div>
                    <button id="valider" onclick="validate()">Valider</button>
                    <button id="annuler" onclick="resetSelected()">Annuler</button><!-- onclick : devrait peut-être refresh la page -->
                    <div class="flex1"></div>
                </div>
            </div>

            <div class="flex1"></div>

            <div id="tokenInfo" class="flexContainer flexColumn">
                <img src="{{ asset('bundles/agoragameaugustus/img/Token/TokenCount.jpg') }}" alt="TokenHelp" width="150">
                <div class="flexContainer flexRow">
                    <p class="p">Jeton du tour : </p>
                    <img src="{{ asset('bundles/agoragameaugustus/img/Token/Token' ~ game.token ~ '.jpg') }}" alt="{{ game.token }}" height="55">
                </div>

                <div class="flex1"></div>

                <div class="action"></div>
            </div>
        </div>

        <!-- THERE WAS LINE 151 to 388 FROM AVE CESAR GAME TWIG -->

        <!-- SCRIPTS -->
        <script>
            let gottaRemove = 0;
            let gottaRemoveAllTokenOnCard = false;
            {% if (game.getState() == "RemoveOneLegion" and (me.legionMax - me.legion >= 1) or (game.getState() == "RemoveTwoLegion" and me.legionMax - me.legion == 1) %}
            gottaRemove = 1;
            (function () {
                document.querySelector("#valider").disabled = true;
                document.querySelectorAll(".cardAction").forEach( function (ee) {
                    ee.lastElementChild.innerHTML = "<p></p>";
                });
                document.querySelector("#instructions").firstElementChild.innerHTML = "Vous devez retirer 1 légion";
            })();
            {% elseif game.getState() == "RemoveTwoLegion" and me.legionMax - me.legion >= 2 %}
            gottaRemove = 2;
            (function () {
                document.querySelector("#valider").disabled = true;
                document.querySelectorAll(".cardAction").forEach( function (ee) {
                    ee.lastElementChild.innerHTML = "<p></p>";
                });
                document.querySelector("#instructions").firstElementChild.innerHTML = "Vous devez retirer 2 légions";
            })();
            {% elseif game.getState() == "RemoveAllLegion" and me.legionMax != me.legion %}
            gottaRemoveAllTokenOnCard = true;
            (function () {
                document.querySelector("#valider").disabled = true;
                document.querySelector("#instructions").firstElementChild.innerHTML = "Vous devez choisir une carte avec des légions dessus. Toutes les légions se retirent de la carte.";
            })();
            {% elseif (game.getState() == "RemoveAllLegion" or game.state == "MoveLegion") and me.legionMax == me.legion %}
            window.onload = function() {
                validate();
            };
            {% endif %}

            //get infos string from nbr of a card
            function cardInfo(nbr) {
                switch(nbr) {
                  case 1:
                    return "placeholder info of card 1";
                  case 2:
                    return "placeholder info of card 2";
                  case 3:
                    return "placeholder info of card 3";
                  default:
                    return "could not find info for card n" + nbr;
                }
            }

            //get the infos string from nbr of a loot
            function lootInfo(loot) {
                switch(loot) {
                  case '2':
                    return advantageInfo(2, 2);
                  case '3':
                    return advantageInfo(3, 4);
                  case '4':
                    return advantageInfo(4, 6);
                  case '5':
                    return advantageInfo(5, 8);
                  case '6':
                    return advantageInfo(6, 10);
                  case 'gold':
                    return "<p>Cette carte revient au joueur qui possède le plus de cartes d'or.</p>" +
                    "<p>Elle rapportera  5 poins lors du décompte final.</p>" +
                    "<img src=\"{{ asset('bundles/agoragameaugustus/img/Loot/LootGold.jpg') }}\" height='100' />";
                  case 'green':
                    return "<p>Cette carte revient automatiquement aux joueurs qui contrôlent 3 cartes objectifs vertes.</p>" +
                    "<p>Elle rapportera  4 poins lors du décompte final.</p>" +
                    "<img src=\"{{ asset('bundles/agoragameaugustus/img/Loot/LootGreen.jpg') }}\" height='100' />";
                  case 'orange':
                    return "<p>Cette carte revient automatiquement aux joueurs qui contrôlent 3 cartes objectifs oranges.</p>" +
                    "<p>Elle rapportera  10 poins lors du décompte final.</p>" +
                    "<img src=\"{{ asset('bundles/agoragameaugustus/img/Loot/LootOrange.jpg') }}\" height='100' />";
                  case 'multi':
                    return "<p>Cette carte revient automatiquement aux joueurs qui contrôlent 3 cartes objectifs de couleurs différentes.</p>" +
                    "<p>Elle rapportera  6 poins lors du décompte final.</p>" +
                    "<img src=\"{{ asset('bundles/agoragameaugustus/img/Loot/LootMulti.jpg') }}\" height='100' />";
                  case 'rose':
                    return "<p>Cette carte revient automatiquement aux joueurs qui contrôlent 3 cartes objectifs roses.</p>" +
                    "<p>Elle rapportera  8 poins lors du décompte final.</p>" +
                    "<img src=\"{{ asset('bundles/agoragameaugustus/img/Loot/LootRose.jpg') }}\" height='100' />";
                  case 'senator':
                    return "<p>Cette carte revient automatiquement aux joueurs qui contrôlent 3 cartes sénateurs.</p>" +
                    "<p>Elle rapportera  2 poins lors du décompte final.</p>" +
                    "<img src=\"{{ asset('bundles/agoragameaugustus/img/Loot/LootSenator.jpg') }}\" height='100' />";
                  case 'wheat':
                    return "<p>Cette carte revient au joueur qui possède le plus de cartes d'blé.</p>" +
                    "<p>Elle rapportera  5 poins lors du décompte final.</p>" +
                    "<img src=\"{{ asset('bundles/agoragameaugustus/img/Loot/LootWheat.jpg') }}\" height='100' />";
                  default:
                    return "could not find info for card n" + nbr;
                }
            }

            function advantageInfo(obj, points) {
                return "<p>Il vous faut contrôler "+ obj +" objectifs pour saisir cette carte.</p>" +
                    "<p>Elle vous rapportera "+ points +" points lors du décompte final.</p>" +
                    "<p>Vous ne pouvez saisir qu'une seule carte récompense lors de la partie.</p>" +
                    "<img src=\"{{ asset('bundles/agoragameaugustus/img/Loot/Loot"+ obj +"Cards.jpg') }}\" height='100' />";
            }


            function getOverlay(infos) {
                document.querySelector(".overlay").innerHTML = infos;
                document.querySelector(".overlay").classList.add("visible");

            }

            function removeOverlay(/* element */) {
                document.querySelector(".overlay").classList.remove("visible");
                document.querySelector(".overlay").innerHTML = "";
            }

            function validate() {
                //DO VARIOUS THINGS
                //TODO
                if (gottaRemove === 0) {
                    let phase = "{{ game.state ?? null }}";

                    switch (phase) {
                        case "legion": //Placement Légion
                            putLegion();
                            break;
                        case "aveCesarCard": //Ave Cesar Pouvoir et ressource
                            getRessource();
                            break;
                        case "aveCesarLoot": //Ave Cesar Loot
                            takeLoot();
                            break;
                        default: //
                            console.log('Sorry, there is a problem of phase (validate function)');
                    }
                    resetSelected();
                }
            }

			function putLegion() {
                {% if me.getLegion == 0 %}
                document.querySelectorAll(".cardAction").forEach( function (ee) {
                    ee.lastElementChild.innerHTML = "<p>Vous n'avez plus de légion libre, si vous le souhaitez vous pouvez déplacé une légion.</p>";
                });

                {% else %}
				//action.from & to
				let toPlayer = action.addToken.iPlayer;
				let toCard = action.addToken.iCard;
				let toToken = action.addToken.iToken;

				let fromPlayer = action.removeToken.iPlayer;
				let fromCard = action.removeToken.iCard;
				let fromToken = action.removeToken.iToken;

				if (toCard != null && toToken != null && toPlayer != null) {
					if (fromCard != null && fromToken != null && fromPlayer != null) {
						//putLegionFromDestToSource(dest, source)
						sendXHR("{{ path('putLegionFromTo') }}?toPlayer=" + toPlayer + "&toCard=" + toCard + "&toToken=" + toToken
						+ "&fromPlayer=" + fromPlayer + "&fromCard=" + fromCard + "&fromToken=" + fromToken);
					} else {
						//putLegionOnCard(Card)
						sendXHR("{{ path('putLegion') }}?toPlayer=" + toPlayer + "&toCard=" + toCard + "&toToken=" + toToken);
					}
				}
                {% endif %}
			}

            //phase 2
            /*
            //Ces fonctions peuvent toutes être gérées via les fonctions de base (remove & add)Token

            //TODO
            //validate -> ajouter un champ type à action (voir Slack)
            
            //TODO removeAllLegion
            // verifier pour validate que 
            // gottaRemoveAllTokenOnCard == false
            
            //TODO moveLegion
            // la limite de addAction et removeAction est levée
            // les limites d'action du joueur sont donc le nombre de légion qu'il a posés
            // Limite de mouvement = nb de legion posé * 2
            //{#// addAction = removeAction = {{ me.maxLegion - me.legion }};#}
            // IMPORTANT
            // addAction == removeAction
            function doMoveLegion() {
            }

            //TODO
            // selectionner une carte qui n'est pas celle capturée,
            // le back la passe de cards à ctrlCards
            function doCompleteCard() {
            }

            //TODO
            // selectionner une carte de la liste des objectifs.
            // La fonction sera peut-être la même que celle utilisée pour récupérer un objectif après un AveCesar
            function oneCard() {
            }
            */

			//phase 3
			function aveCesar() {
				let loot = document.querySelectorAll(".selectedBoard");
                if (loot != null) {
                    let lootString = loot.alt.replace("Loot", "");
                    if (lootString != null) {
                        //getLoot(loot)
                        //TODO s'assurer que la variable globale loot ne peut être affectée
                        sendXHR("{{ path('takeLoot') }}?loot=" + lootString);
                    }
                }
            }

			function sendXHR(path) {
				let xhr = new XMLHttpRequest();
				xhr.onreadystatechange = function() {
					if (xhr.readyState === XMLHttpRequest.DONE) {
						document.write(xhr.responseText);
					}
				};
				xhr.open('GET', path, true);
				xhr.send();
			}

            function resetSelected() {
                let board = document.querySelectorAll(".selectedBoard");
                let hand = document.querySelectorAll(".selectedHand");

                board.forEach(function (element) {
                    element.classList.remove("selectedBoard");
                });
                hand.forEach(function (element) {
                    element.classList.remove("selectedHand");
                });
            }

            function selectHand(e) {
                resetSelected();
                e.classList.add("selectedHand");

                if (document.querySelector(".action").hasChildNodes()) {
                    document.querySelector(".action").firstElementChild.style.visibility = "hidden";
                    document.querySelector("#myBar").querySelectorAll(".card")[parseInt(document.querySelector(".action").firstElementChild.classList[0].replace("cardAction",""))].appendChild(document.querySelector(".action").firstChild);
                }

                e.querySelector(".cardAction").style.visibility = "visible";
                document.querySelector(".action").appendChild(e.querySelector(".cardAction"));
            }

            //FONCTION POUR LE POUVOIR "Retirer toutes les légions d'une carte"
            function removeAllLegionOnCard(indCard) {
			    action.removeAllLegion = indCard;
                document.querySelector("#valider").disabled = false;
                gottaRemoveAllTokenOnCard = false;
            }

            {% if game.state != "MoveLegion" %}
            
            {# Cas normal #}
            //FONCTION DE SELECTION DE LA LEGION A RETIRER
            {% if game.state.includes("Two") and game.getAffectedPlayer() == me %}
            let addAction = 2;
            let removeAction = 2;
            {% endif %}
            let legion = {{ me.legion ?? 0 }};
            let action = {};
            let selectedToken = {};
            let selectedCard = {};
            function selectToken(e, indToken, indCard) {
                document.querySelectorAll(".selectedToken").forEach( function (ee) {
                    ee.classList.remove("selectedToken");
                });

                e.classList.add("selectedToken");
                selectedToken.ind = indToken;
                selectedToken.elem = e;
                selectedCard.ind = indCard;
            }

            //FONCTION DE RETIRAGE DE LA LEGION SELECTIONNE
            function removeSelectedLegion() {
                if (selectedToken !== {} && selectedCard !== {}) {
					if (typeof(action.removeToken) != 'undefined') {
						action.removeToken = {};
						action.removeToken.token = [];
						action.removeToken.card = [];
					}
                    if ((typeof(removeAction) != 'undefined' && removeAction === 2) || gottaRemove === 2) {
                        action.removeToken.token.push(selectedToken.ind);
                        action.removeToken.card.push(selectedCard.ind);
                        selectedToken.elem.style.visibility = "hidden";
                        selectedToken.elem = null;
                        removeAction -= 1;
                    } else if (gottaRemove <= 1) {
                        action.removeToken.token.push(selectedToken.ind);
                        action.removeToken.card.push(selectedCard.ind);
                        document.querySelectorAll(".cardAction").forEach(function (ee) {
                            ee.firstElementChild.innerHTML = "<p>Vous avez retiré une légion, vous ne pouvez plus en retirer d'avantage ce tour.</p>";
                        });
                    }
                    if (gottaRemove === 2) {
                        gottaRemove = 1;
                        document.querySelector("#instructions").firstElementChild.innerHTML = "Vous devez retirer encore 1 légion";
                    } else if (gottaRemove === 1) {
                        gottaRemove = 0;
                        document.querySelector("#instructions").firstElementChild.innerHTML = "Vous pouvez valider vos actions";
                    }

                    legion += 1;
                    document.querySelector("#myInfo").innerHTML = "<p class=\"p\">\n" +
                        "{{ me.name }}<br>\n" +
                        "Légions :<br>\n" +
                        legion + "/{{ me.legionMax }}<br>\n" +
                        "Score :<br>\n" +
                        "{{ me.score }}\n" +
                        "<br>\n" +
                        "Resssources :<br>\n" +
                        "Blé : {{ me.wheat }}<br>\n" +
                        "Or : {{ me.gold }}<br>\n" +
                        "</p>";
                } else {
                    alert("Aucun emplacement selectionné");
                }
            }

            // FONCTION DE POSE D'UNE LEGION
            //Vérifie si le joueur peut poser une légion sur la carte et si il le peut propose le token le plus rare
            function addBestToken(e, listToken, listControlled, indCard) {
                if (legion > 0) {
                    let actualToken = "{{ game.token ?? null }}";
                    let actualTokens = [];
                    actualTokens = [{{ game.token ?? null }}];
                    actualTokens.push(actualToken);
                    let powerList = [];
                    powerList = {{ me.equivalences ?? null }};

                    {% if game.getState() == "TwoLegionOnDoubleSword" and game.getAffectedPlayer() == me %}
                    actualTokens = ["double sword"];
                    {% elseif game.getState() == "TwoLegionOnTeaches" and game.getAffectedPlayer() == me %}
                    actualTokens = ["teaches"];
                    {% elseif game.getState() == "TwoLegionOnShield" and game.getAffectedPlayer() == me %}
                    actualTokens = ["shield"];
                    {% elseif game.getState() == "TwoLegionOnKnife" and game.getAffectedPlayer() == me %}
                    actualTokens = ["knife"];
                    {% elseif  game.getState() == "OneLegionOnAnything" and game.getAffectedPlayer() == me %}
                    actualTokens = ["double sword", "shield","chariot", "catapult", "teaches","knife" ];
                    {% elseif game.getState() == "TwoLegionOnChariot" and game.getAffectedPlayer() == me %}
                    actualTokens = ["chariot"];
                    {% elseif  game.getState() == "TwoLegionOnCatapult" and game.getAffectedPlayer() ==  me  %}
                    actualTokens = ["catapult"];
                    {% elseif  game.getState() == "TwoLegionOnAnything" and game.getAffectedPlayer() == me %}
                    actualTokens = ["double sword", "shield","chariot", "catapult", "teaches","knife" ];
                    {% else %}
                    switch (actualToken) {
                        case "shield" :
                            if (powerList.contains("ShieldIsChariot")) {
                                actualTokens.push("chariot");
                            }
                            if (powerList.contains("DoubleSwordIsShield")) {
                                actualTokens.push("double sword");
                            }
                            break;
                        case "knife" :
                            if (powerList.contains("TeachesIsKnife")) {
                                actualTokens.push("teaches");
                            }
                            break;
                        case "chariot" :
                            if (powerList.contains("ChariotIsCatapult")) {
                                actualTokens.push("catapult");
                            }
                            if (powerList.contains("ShieldIsChariot")) {
                                actualTokens.push("shield");
                            }
                            break;
                        case "double sword" :
                            if (powerList.contains("DoubleSwordIsShield")) {
                                actualTokens.push("shield");
                            }
                            break;
                        case "catapult" :
                            if (powerList.contains("ChariotIsCatapult")) {
                                actualTokens.push("chariot");
                            }
                            if (powerList.contains("CatapultIsTeaches")) {
                                actualTokens.push("teaches");
                            }
                            break;
                        case "joker" :
                            actualTokens.push("double sword");
                            actualTokens.push("shield");
                            actualTokens.push("chariot");
                            actualTokens.push("catapult");
                            actualTokens.push("teaches");
                            actualTokens.push("knife");
                            break;
                        case "teaches" :
                            if (powerList.contains("CatapultIsTeaches")) {
                                actualTokens.push("catapult");
                            }
                            if (powerList.contains("TeachesIsKnife")) {
                                actualTokens.push("knife");
                            }
                            break;
                        default:
                            console.log("Erreur, pas de token actuel détecté");
                            break;
                    }
                    {% endif %}

                    //recherche sur la carte
                    let indToken = -1;
                    listToken.forEach( function (e, i) {
                        if (actualTokens.contains(e)) {
                            if (! listControlled[i]) {
                                indToken = i;
                            }
                        }
                    });

                    //si la recherche est ok
                    if (indToken !== -1) {
                        action.addToken = {};
                        action.addToken.card = {};
                        action.addToken.token = {};
                        if (typeof(addAction) != 'undefined' && addAction === 2) {
                            action.addToken.card.push(indCard);
                            action.addToken.token.push(indToken);
                            addAction = 1;

                            // on doit changer le tableau des tokens controlés
                            listControlled[indToken] = 1;
                            e.onclick = function () {
                                addBestToken(this, listToken, listControlled, indCard);
                            };
                        }
                        else if (typeof(addAction) != 'undefined' && addAction === 1) {
                            action.addToken.card.push(indCard);
                            action.addToken.token.push(indToken);
                            document.querySelectorAll(".cardAction").forEach( function (ee) {
                                ee.lastElementChild.innerHTML = "<p>Vous avez posé une légion ce tour, vous ne pouvez plus en poser d avantage.</p>";
                            });
                        }
                        else {
                            action.addToken.card.push(indCard);
                            action.addToken.token.push(indToken);
                            document.querySelectorAll(".cardAction").forEach( function (ee) {
                                ee.lastElementChild.innerHTML = "<p>Vous avez posé une légion ce tour, vous ne pouvez plus en poser d avantage.</p>";
                            });
                        }

                        legion -= 1;
                        document.querySelector("#myInfo").innerHTML = "<p class=\"p\">\n" +
                            "{{ me.name }}<br>\n" +
                            "Légions :<br>\n" +
                            legion + "/{{ me.legionMax }}<br>\n" +
                            "Score :<br>\n" +
                            "{{ me.score }}\n" +
                            "<br>\n" +
                            "Resssources :<br>\n" +
                            "Blé : {{ me.wheat }}<br>\n" +
                            "Or : {{ me.gold }}<br>\n" +
                            "</p>";
                    } else {
                        alert("On ne peut capturer aucun token de cette carte");
                    }
                } else {
                    alert("Vous n'avez plus de légion à poser");
                }
            }
            
            {% elseif game.state == "MoveLegion" and game.getAffectedPlayer() == me and me.legion != me.legionMax %}
            
            {# Cas MOVE LEGION #}
            let addAction = {{ me.legionMax - me.legion }};
            let removeAction = addAction;
            let action = {};
            let selectedToken = {};
            let selectedCard = {};
            //MOVE LEGION version
            function selectToken(e, indToken, indCard) {
                document.querySelectorAll(".selectedToken").forEach( function (ee) {
                    ee.classList.remove("selectedToken");
                });

                e.classList.add("selectedToken");
                selectedToken.ind = indToken;
                selectedToken.elem = e;
                selectedCard.ind = indCard;
            }

            //MOVE LEGION version
            function removeSelectedLegion() {
                if (selectedToken !== {} && selectedCard !== {}) {
					if (typeof(action.removeToken) == 'undefined') {
						action.removeToken = {};
						action.removeToken.token = [];
						action.removeToken.card = [];
					}
                    if (typeof(removeAction) != 'undefined' && removeAction >= 2) {
                        action.removeToken.token.push(selectedToken.ind);
                        action.removeToken.card.push(selectedCard.ind);
                        selectedToken.elem.style.visibility = "hidden";
                        selectedToken.elem = null;
                        removeAction -= 1;
                    } else if (gottaRemove <= 1) {
                        action.removeToken.token.push(selectedToken.ind);
                        action.removeToken.card.push(selectedCard.ind);
                        document.querySelectorAll(".cardAction").forEach(function (ee) {
                            ee.firstElementChild.innerHTML = "<p>Vous avez retiré vos légions, vous devez finir de les repositionner.</p>";
                        });
                    }

                    legion += 1;
                    document.querySelector("#myInfo").innerHTML = "<p class=\"p\">\n" +
                        "{{ me.name }}<br>\n" +
                        "Légions :<br>\n" +
                        legion + "/{{ me.legionMax }}<br>\n" +
                        "Score :<br>\n" +
                        "{{ me.score }}\n" +
                        "<br>\n" +
                        "Resssources :<br>\n" +
                        "Blé : {{ me.wheat }}<br>\n" +
                        "Or : {{ me.gold }}<br>\n" +
                        "</p>";
                } else {
                    alert("Aucun emplacement selectionné");
                }
            }

            //MOVE LEGION version
            function addBestToken(e, listToken, listControlled, indCard) {
                if (legion > 0) {
					
                    //recherche sur la carte
                    let indToken = -1;
                    listToken.forEach( function (e, i) {
						if (! listControlled[i]) {
							indToken = i;
						}
                    });

                    //si la recherche est ok
                    if (indToken !== -1) {
						if (typeof(action.addToken) == 'undefined') {
							action.addToken = {};
							action.addToken.card = [];
							action.addToken.token = [];
						}
						
                        if (typeof(addAction) != 'undefined' && addAction >= 2) {
                            action.addToken.card.push(indCard);
							action.addToken.token.push(indToken);
                            addAction -= 1;

                            // on doit changer le tableau des tokens controlés
                            listControlled[indToken] = 1;
                            e.onclick = function () {
                                addBestToken(this, listToken, listControlled, indCard);
                            };
                        }
                        else if (typeof(addAction) != 'undefined' && addAction === 1) {
                            action.addToken.card.push(indCard);
							action.addToken.token.push(indToken);
                            document.querySelectorAll(".cardAction").forEach(function (ee) {
                                ee.lastElementChild.innerHTML = "<p>Vous avez posé une légion ce tour, vous ne pouvez plus en poser d avantage.</p>";
                            });
                        }
                        else {
                            action.addToken.card.push(indCard);
							action.addToken.token.push(indToken);
                            document.querySelectorAll(".cardAction").forEach(function (ee) {
                                ee.lastElementChild.innerHTML = "<p>Vous avez posé une légion ce tour, vous ne pouvez plus en poser d avantage.</p>";
                            });
                        }

                        legion -= 1;
                        document.querySelector("#myInfo").innerHTML = "<p class=\"p\">\n" +
                            "{{ me.name }}<br>\n" +
                            "Légions :<br>\n" +
                            legion + "/{{ me.legionMax }}<br>\n" +
                            "Score :<br>\n" +
                            "{{ me.score }}\n" +
                            "<br>\n" +
                            "Resssources :<br>\n" +
                            "Blé : {{ me.wheat }}<br>\n" +
                            "Or : {{ me.gold }}<br>\n" +
                            "</p>";
                    } else {
                        alert("On ne peut capturer aucun token de cette carte");
                    }
                } else {
                    alert("Vous n'avez plus de légion à poser");
                }
            }
            {% endif %}

            function selectBoard(e) {
                if ("{{ game.getState }}" === "legion") return;

                resetSelected();
                e.classList.add("selectedBoard");
            }

            function resetSelectedPlayer() {
                let e = document.querySelectorAll(".selectedPlayer");

                e.forEach(function (element) {
                    element.style.visibility = "hidden";
                });
            }

            function selectPlayer(i) {
                resetSelectedPlayer();
                document.querySelectorAll(".selectedPlayer")[i].style.visibility = "visible";
            }




            //disable all drag effect on the images
            document.querySelectorAll("img").forEach(function (imgElem) {
                imgElem.draggable = false;
            });
        </script>






        <!-- TCHAT DIV + SCRIPT -->
        <div class="tchat">
            <div class="titleTchat">
                <img id="flecheTchat" src="{{ asset('bundles/agoragameavecesar/image/fleche_historique_bas.png') }}" alt="x">
                <i>Chat du lobby</i>
            </div>
            <div id="discussion"></div>
            <textarea id="UserMessage" placeholder="Entrez votre message ici"></textarea>
        </div>
        <button id="buttAcc" onclick="window.location.href = '{{ app.request.getSchemeAndHttpHost() }}'">Accueil</button>
        <script>//Script gérant le tchat
            document.getElementById('UserMessage').addEventListener('keypress', function (event) {
                let key = event.hasOwnProperty('which') ? event.which : event.keyCode;
                if (key === 13) { // 13 est la touche entrée
                    let div = document.createElement("div");
                    let message = document.getElementById('UserMessage').value;
                    /*
                    var clientInformation = {
                        {#gameId: "{{ game.id }}",#}
                            {#playerId: "{{ player.id }}",#}
                            action : {
                                type: "message",
                                username: playerUsername,
                                message: message
                                },
                            gameCode : "aug"
                        };
                    */
                    div.textContent = "Moi : " + message;
                    document.getElementById('UserMessage').value = "";
                    div.className = "messageMy";
                    document.getElementById("discussion").appendChild(div);
                    conn.send(JSON.stringify(clientInformation));
                }
            });
            let flecheTchat = document.getElementById("flecheTchat");
            flecheTchat.addEventListener("click", tchatOnClick);
        </script>
    </body>
</html>
