<!doctype html><html class="no-js" lang=""><head>    <meta charset="utf-8">    <meta http-equiv="x-ua-compatible" content="ie=edge">    <title>{{ game.name }}</title>    <meta name="description" content="">    <meta name="viewport" content="width=device-width, initial-scale=1">    <link rel="manifest" href="site.webmanifest">    <link rel="apple-touch-icon" href="icon.png">    <!-- Place favicon.ico in the root directory -->    <link rel="stylesheet" href="{{ asset('bundles/agoragamesqp/css/main.css') }}"></head><body><script src="{{ asset('bundles/agoragamesqp/script/vendor/modernizr-3.5.0.min.js') }}"></script><script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=" crossorigin="anonymous"></script><script>window.jQuery || document.write('<script src="{{ asset('bundles/agoragamesqp/script/vendor/jquery-3.2.1.min.js') }}"><\/script>')</script><script src="{{ asset('bundles/agoragamesqp/script/Card6QP.js') }}"></script><script src="{{ asset('bundles/agoragamesqp/script/GraphicCard.js') }}"></script><script src="{{ asset('bundles/agoragamesqp/script/API.js') }}"></script><script>    //Fonction demandant au serveur de placer une carte    function putCardInRow(i) {        setTimeout(function () {            var card = cardInBox.getValue();            var clientInformation = {                type: "card",                idGame: {{ game.id }},                idPlayer: {{ player.id }},                card: card,                row: i            }            conn.send(JSON.stringify(clientInformation));            removeCardFromHandModel(card);            cardInBox = null;            $('#status').empty();        }, 350);    }    //Fonction plaçant la carte dans la case du joueur    function putCard() {        if (typeof selectedCard != 'undefined') {            cardInBox = selectedCard;            delete selectedCard;            cardInBox.moveDivInSlot('slot{{ player.id }}');            var clientInformation = {                type: 'readyCard',                idGame: {{ game.id }},                idPlayer: {{ player.id }},                orderTurn: {{ player.orderTurn }},                card: cardInBox.getValue()            }            conn.send(JSON.stringify(clientInformation));            $('#status').empty();        }    }    //Action réalisée lors du cliquage sur une carte de la main    function clickOnCard(id) {        //GraphicCard est définie dans le fichier js/GraphicCard.js        var card = new GraphicCard(id);        selectedCard = card;        var idCSS = "tracker" + id;        var d = document.getElementById(idCSS);        //La classe trackerNoRotation permet d'enlever l'effet de rotation de la carte        d.className = "trackerNoRotation";        //On place la carte dans la case du joueur dans le modèle        cardInBox = selectedCard;        cardInBox.moveDivInSlot('slot{{ player.id }}');        var clientInformation = {            type: "readyCard",            idGame: {{ game.id }},            idPlayer: {{ player.id }},            orderTurn: {{ player.orderTurn }},            card: cardInBox.getValue()        }        conn.send(JSON.stringify(clientInformation));        //à la fin car sinon cela stop l'exécution de la fonction (étrange)        removeEventClickOnHand();    }    //Fonction dessinant les cases des joueurs et leurs scores    function createSlots(data) {        var b = document.getElementById('slots');        var s = document.getElementById('scores');        //Du DOM comme on aime        for (var i in data.players) {            //On dessine la case            var div = document.createElement("div");//Case globale            var div1 = document.createElement("div");//Username            var div2 = document.createElement("div");//Emplacement carte            div2.className = "slot";            div2.textContent = " ";//Un espace pour que la case ne soit pas invisible            div2.setAttribute("id", "slot" + data.players[i].id);            var text = document.createTextNode(data.players[i].idUser);            div1.appendChild(text);            div.appendChild(div1);            div.appendChild(div2);            b.appendChild(div);            //On dessine le score            var divs1 = document.createElement("div");//Emplacement score global d'un joueur            var divs2 = document.createElement("div");// Username            var divs3 = document.createElement("div");//score            var img = document.createElement('img');            img.src = '/bundles/agoragamesqp/image/teteDeBoeuf.svg';//Petite tête de boeuf devant le score            img.width = "35";//35 pour 35px, ne pas ajouter px (pq ?, on sait pas mais ça fonctionne pas)            img.height = "35";            img.style.visibility = "visible";            divs1.className = "score";            divs3.setAttribute("id", "score" + data.players[i].id);            var texts = document.createTextNode(data.players[i].idUser);            divs2.appendChild(texts);            var texts2 = document.createTextNode(data.players[i].score);            divs3.appendChild(texts2);            divs1.appendChild(img);            divs1.appendChild(divs2);            divs1.appendChild(divs3);            s.appendChild(divs1);        }        //On rend visible que si la partie à commencée        if (started == "1") {            b.style.visibility = "visible" ;            s.style.visibility = "visible" ;        }    }    //Action effectuée au démarrage de la partie    function startGame(board, hand, data) {        //On enregistre bien que la partie a démarré        started = 1;        //On instancie les modèles et éléments graphiques        //createBoard(board);        //createHand(hand);        createSlots(data);        //On vide le champ status        $('#status').empty();        var clientInformation = {            type: "begin",            idGame: {{ game.id }}        }        conn.send(JSON.stringify(clientInformation));    }</script><div id="game">    <div id="plays">        <div id="slots">            {% for p in players %}                <div class="slotPlayer">                    <div>{{ p.idUser.username }} </div>                    <div id="slot{{ p.id }}" class="slot">                        {% if p.lastCardPlayed is not null and p.id != player.id %}                            {% if p.orderTurn != 0 %}                                <div class="tracker" id="tracker{{ p.lastCardPlayed }}"></div>                                <script> var card = new GraphicCard('{{ p.lastCardPlayed }}');                                card.revealCard();</script>                            {% else %}                                <div class="tracker"></div>                            {% endif %}                        {% endif %}                    </div>                </div>            {% endfor %}        </div>        <div id="hand"></div>        <div id="scores">            {% for p in players %}                <div class="score">                    <div class="imageScore"><img width="35px" height="35px"                                 src="{{ asset('bundles/agoragamesqp/image/teteDeBoeuf.svg') }}"></div>                    <div>{{ p.idUser.username }} </div>                    <div id="score{{ p.id }}">{{ p.score }}</div>                </div>            {% endfor %}        </div>        <button id="buttAcc" onclick="window.location.href = '{{ app.request.getSchemeAndHttpHost() }}'">Accueil</button>    </div>    <div id="board"></div>    <div id="status">Les autres joueurs ne sont pas connectés</div></div><script>    //Indique quel joueur doit jouer    var turn = '{{ game.turn }}';    //Ordre de tour du joueur, vaut 0 si les joueurs n'ont pas tous déposé une carte    var order = '{{ player.orderTurn }}';    //Champ contenant les réponses du serveur par websockets    var data;    //Indique si la partie a démarré (1 si oui sinon 0)    var started = "{{ started }}";    //Le modèle du plateau des cartes    var boardModel = {row1: new Array(), row2: new Array(), row3: new Array(), row4: new Array()};    //Le modèle de la main du joueur    var handModel = new Array();    //Représentation de la main du joueur sous forme de String    var hand = "{{ player.hand }}";    //Carte sélectionnée    var selectedCard;    //Carte dans la boîte    var cardInBox;    //Représentation du plateau sous forme de String    var board = "{{ game.board }}";    //Indique si le tchat est caché (0) ou ouvert (1)    var IsOpenTchat = 0;    if (started == "1") {        createHand(hand);        createBoard(board);        var b = document.getElementById('slots');        var s = document.getElementById('scores');        b.style.visibility = "visible" ;        s.style.visibility = "visible" ;    }    //Si le joueur a placé une carte dans sa case    if ('' != '{{ player.lastCardPlayed }}') {        cardInBox = new GraphicCard('{{ player.lastCardPlayed }}');        var h = document.getElementById("slot{{ player.id }}");        var img = document.createElement('div');        img.setAttribute('id', 'tracker' + '{{ player.lastCardPlayed }}');        img.className = 'trackerNoRotation';        h.appendChild(img);        cardInBox.revealCard();        removeEventClickOnHand();        //Si c'est le tour du joueur lors du chargement du jeu, on effectue son tour        if (turn == order && cardInBox != null && cardInBox != undefined) {            displayRowChoice(cardInBox.getValue());        }    }    /**Configuration de la socket, il suffit de rentrer l'url du serveur de la websocket     * qui a été configurée dans le fichier SQPSocketCommand    * @type WebSocket    */    //On retrouve l'url de base du serveur à la barbare    var urlSock = "{{ app.request.getSchemeAndHttpHost() }}";    //On enlève le http (ou https)    urlSock = urlSock.split("/");    urlSock = urlSock[2];    //On enlève le port    urlSock = urlSock.split(":");    urlSock = urlSock[0];    var conn = new WebSocket('ws://'+ urlSock +':8086');    conn.onopen = function(e) {        console.info("Connection established succesfully");        var clientInformation = {            type: "ready",            idGame: {{ game.id }},            idPlayer: {{ player.id }}        }        conn.send(JSON.stringify(clientInformation));    };    //Liste des actions lors de la réception d'un message    conn.onmessage = function (e) {        data = JSON.parse(e.data);        //Si le serveur indique que la partie peut commencer        if (data.type == "begin") {            $('#status').empty();            //Si le joueur est l'host, on affiche le bouton pour démarrer            if ({{ game.idHost }} == {{ player.idUser.id }} && started != 1) {                startGame(board, hand, data);            }        //Arrivée d'un nouveau joueur        } else if (data.type == "newPlayer") {            var s = document.getElementById('scores');            //On efface les cases des joueurs            while ( s.firstChild ) s.removeChild( s.firstChild );            var b = document.getElementById('slots');            //On efface les cases des joueurs            while ( b.firstChild ) b.removeChild( b.firstChild );            createSlots(data);        //Le serveur demande à la main de se mettre à jour        } else if (data.type == "refreshHand") {            var hand = data.hand;            var h = document.getElementById('hand');            //On efface toutes les cartes            while ( h.firstChild ) h.removeChild( h.firstChild );            createHand(hand);        //Le serveur demande au board de se mettre à jour        } else if (data.type == "refreshBoard") {            var id = "slot" + data.justPlayed;            var slot = document.getElementById(id);            while (slot.firstChild) slot.removeChild(slot.firstChild);            var b = document.getElementById('board');            //On efface le board            while (b.firstChild) b.removeChild(b.firstChild);            createBoard(data.board);            turn = data.turn;            //Si c'est le tour du jour, on le fait jouer            if (turn == order && cardInBox != null && cardInBox != undefined) {                displayRowChoice(cardInBox.getValue());            }            var hand;            for (var i in data.players) {                if (data.players[i].id == '{{ player.id }}') {                    hand = data.players[i].hand;                }                var id = "score" + data.players[i].id;                var score = document.getElementById(id);                score.textContent = data.players[i].score;            }            var h = document.getElementById('hand');            //On efface toutes les cartes            while ( h.firstChild ) h.removeChild( h.firstChild );            createHand(hand);        //Demande de rafraichissement complet        } else if (data.type == "refreshAll") {            started = 1;            var hand = data.hand;            var h = document.getElementById('hand');            //On efface toutes les cartes            while (h.firstChild) h.removeChild(h.firstChild);            createHand(hand);            var b = document.getElementById('board');            //On efface le board            while (b.firstChild) b.removeChild(b.firstChild);            createBoard(data.board);            var s = document.getElementById('slots');            //On efface les cases des joueurs            while (s.firstChild) s.removeChild(s.firstChild);            s = document.getElementById('scores');            //On efface les scores des joueurs            while (s.firstChild) s.removeChild(s.firstChild);            createSlots(data);        //Message reçu lorsque qu'un joueur sélectionne une carte        } else if (data.type == "readyCard") {            var idSlot = "slot" + data.idPlayer;            var s = document.getElementById(idSlot);            var img = document.createElement("div");            img.className = 'tracker';            s.appendChild(img);        //Message reçu lorsque tous les joueurs on déposé leur carte        } else if (data.type == "READY") {            var playerInfo;            for (var i in data.players) {                if (data.players[i].id == "{{ player.id }}") {                    playerInfo = data.players[i];                }            }            order = playerInfo.orderTurn;            if (turn == order && cardInBox != null && cardInBox != undefined) {                displayRowChoice(cardInBox.getValue());            }            for (var i in data.players) {                var id = "slot" + data.players[i].id;                var slot = document.getElementById(id);                while (slot.firstChild) slot.removeChild(slot.firstChild);                var img = document.createElement("div");                img.setAttribute('id', 'tracker' + data.players[i].lastPlayedCard);                img.className = 'tracker';                slot.appendChild(img);                var card = new GraphicCard(data.players[i].lastPlayedCard);                card.revealCard();            }        //Message reçu lorque la partie est terminée        } else if (data.type == "END") {            var results = new Array();            for (var i in data.players) {                results['' + data.players[i].idUser] = data.players[i].score;            }            results = sortProperties(results);            var resultsAsString = "Terminé ! Voici le classement des joueurs !\n";            var orderLeader = 1;            for (var j in results) {                resultsAsString += "" + orderLeader + " : " + results[j][0] + " avec un score de " + results[j][1] + "\n";                ++orderLeader;            }            if(!alert(resultsAsString)) document.location = '{{ app.request.getSchemeAndHttpHost() }}';        //Message reçu lors d'une erreur serveur (ne doit jamais arriver)        } else if (data.type == "error") {            $('#error').text(data.msg);        } else if (data.type == "message") {            var div = document.createElement("div");            div.className = "messageOther";            div.textContent = data.username + " : " + data.message;            document.getElementById("discussion").appendChild(div);        //Chargement du tchat en début de partie        } else if (data.type == "tchatLoad") {            loadTchat(data);        }    }    conn.onerror = function(e) {        alert("Error: something went wrong with the socket.");        console.error(e);    };// END SOCKET CONFIG</script><div class="tchat">    <div class="titleTchat">        <img id="flecheTchat" src="{{ asset('bundles/agoragamesqp/image/fleche_historique_bas.png') }}">        <i>Chat du lobby</i>    </div>    <div id="discussion"></div>    <textarea id="UserMessage" placeholder="Entrez votre message ici"></textarea></div><script>    document.getElementById('UserMessage').addEventListener('keypress', function (event) {        var key = event.hasOwnProperty('which') ? event.which : event.keyCode;        if (key == 13) { // 13 est la touche entrée            var div = document.createElement("div");            var message = document.getElementById('UserMessage').value;            var clientInformation = {                type: "message",                idGame: {{ game.id }},                idPlayer: {{ player.id }},                username: "{{ player.idUser.username }}",                message: message            }            div.textContent = "Moi : " + message;            document.getElementById('UserMessage').value = "";            div.className = "messageMy";            document.getElementById("discussion").appendChild(div);            conn.send(JSON.stringify(clientInformation));        }    });    var flecheTchat = document.getElementById("flecheTchat");    flecheTchat.addEventListener("click", tchatOnClick);    //Permet de charger le tchat lorsqu'un joueur se connecte    function loadTchat(data) {        for (var i in data.tchat) {            var msg = JSON.parse(data.tchat[i]);            if (msg.idPlayer == "{{ player.id }}") {                var div = document.createElement("div");                div.textContent = "Moi : " + msg.message;                div.className = "messageMy";                document.getElementById("discussion").appendChild(div);            } else {                var div = document.createElement("div");                div.className = "messageOther";                div.textContent = msg.username + " : " + msg.message;                document.getElementById("discussion").appendChild(div);            }        }    }</script></body></html>